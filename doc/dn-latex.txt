*dn-latex.txt*	Auxiliary filetype plugin for tex/latex
David Nebauer                                                       *dn-latex*

==============================================================================
CONTENTS                                                   *dn-latex-contents*
  1. Introduction.............................................|dn-latex-intro|
  2. Commands..............................................|dn-latex-commands|
  3. Functions............................................|dn-latex-functions|
  4. Mappings..............................................|dn-latex-mappings|
  5. Variables.................................................|dn-latex-vars|

==============================================================================
INTRODUCTION                                                  *dn-latex-intro*

An auxiliary latex (tex) filetype plugin providing some useful features.  It
is assumed the primary LaTeX plugin being used is Automatic LaTeX Plugin for
Vim. In fact, this plugin provides an atprc file that can be used as the
primary user atp configuration file, or can be called from it. Not all
features of this plugin require ATP, but some do.

This plugin also assumes the availability of the |dn-utils| plugin. It relies
on variables and functions provided by it. It contributes to the dn-utils help
system that is triggered by <Leader>help, usually \help.

TEMPLATES

Templates are provided for article, report, book and beamer presentation
documents. Function |dn#latex#insertTemplate()| provides for the user to
select document type and enter document author, title and description (and
institute for Beamer presentations). An appropriate template is inserted and
the values replace tokens in the templates. Function
|dn#latex#dn#latex#insertTemplate()| is designed to be called from the |vimrc|
file or the |BufNewFile| event.

BEAMER

The plugin includes files for beamer themes Air, Amsterdam, Bunsen,
Frederiksberg, Lleida, McGill, Oxygen, Stockton, Sybila, Torino and UNL. These
files are located in the plugin's "vim-dn-latex-resources/beamer" plugin
subdirectory. To install the themes in tex they need to copied into a latex
directory. Assuming "vim-dn-latex-resources/beamer" is on the runtimepath, the
beamer files can be copied to the TEXMFHOME directory (usually "~/texmf" on
unix) by running the |dn#latex#syncBeamer()| function. This function
determines the target directory using "kpsewhich", copies (synchronises) the
beamer files into it using "rsync", and the tex ls-R database is updated by
"mktexlsr" (on some systems "mktexlsr" is called "texhash").

GIT INTEGRATION

"Git provides hooks which trigger custom scripts when certain actions occur.
The "vim-dn-latex-resources/git" plugin directory contains a bash script
called "post-merge" which is designed to be run after a git merge. The script
uses "kpsewhich", "rsync" and "mktexlsr" to synchronise beamer files. It
assumes the beamer files are located at
"$HOME/.vim/bundle/vim-dn-latex/vim-dn-latex-resources/beamer/". If the beamer
files are installed in a different location the script needs to be edited
accordingly.

The script cannot be distributed with the repository in such a way as to
automatically install on the client side. It must be installed by the user.
There are several methods by which the script can be called during plugin
updates (that include a "git merge/pull"). Some package managers, such as
vundle, perform a git pull on every plugin update. The easiest method on a
unix system to automate running the script after every "git pull" is to create
a git template directory with a hooks subdirectory:
>
  mkdir -p ~/.git-templates/hooks
<
then configure this directory as a git templates directory:
>
  git config --global init.templatedir '~/.git-templates'
<
then install the post-merge script:
>
  cp ~/.vim/bundle/vim-dn-latex/vim-dn-latex-resources/git/post-merge \
          ~/.git-templates/hooks/
<
This means the script is copied into every subsequent repository that is
created. To install it into an existing repository, such as dn-latex, change
to the repository root directory and:
>
  git init
<
Although the post-merge hook to synchronise beamer files is copied into every
new repository, the script checks the name of the repository that calls it and
only synchronises beamer files if the repository is named "vim-dn-latex".

ULTISNIPS INTEGRATION

The following custom ultisnips snippets are provided:
  * begin:     generic environment wrapper
  * tab:       table environment
  * fig:       figure environment
  * subfig:    figure with two subfigures
  * sfigadd:   additional subfigure
  * eqn:       equation
  * eqa:       equation array
  * eqd:       math environment ("$ ${1} $")
  * enum:      enumerate environment
  * itemize:   itemize environment
  * quote:     quote environment
  * desc:      description environment
  * chap:      chapter environment
  * sec:       section environment
  * sub:       subsection environment
  * subs:      subsubsection environment
  * par:       paragraph environment
  * subp:      subparagraph environment
  * itd:       item with description
  * refchar:   chaper reference
  * reffig:    figure reference
  * reftab:    table reference
  * refsec:    section reference
  * refpag:    page reference
  * citen:     name citation
  * cite:      citation
  * verbatim:  verbatim environment
  * verb:      verb
  * lrp:       left and right parentheses
  * lrb:       left and right braces
  * lra:       left and right angle brackets
  * frame:     empty beamer frame
  * frlist:    beamer frame with itemised list
  * frfig:     beamer frame with figure
  * frsubfig:  beamer frame with multiple subfigures
  * frfullfig: beamer frame with full size image
  * beamerbox: framed/boxed text

@ subsection ATP integration

The Automatic LaTeX Plugin is a latex plugin for latex (project page:
http://atp-vim.sourceforge.net/, repo: https://github.com/coot/atp_vim).

This ftplugin provides a configuration file for ATP. The file can be used as
the base configuration file for ATP or can be sourced by it. The configuration
file is located in the "vim-dn-latex-resources/atp" directory of the plugin.

The configuration file has the following features:

  * Sets ATP to use vim regular expression syntax rather than python
    completion (by setting g:atp_bibsearch to "vim").

  * Provides shortcuts for moving between environments. Moving to the next
    environment is mapped to ">E" in Normal mode. Moving to the previous
    environment is mapped to "<E" in Normal mode.

  * Sets progress bar to display on tex compilation by setting
    |g:atp_ProgressBar| to true and |g:atp_statusNotif| to true.

  * Switches to the lualatex engine by setting |b:atp_TexCompiler| to
    "lualatex").

  * Sets the compilation switch '-recorder' by adding it to
    |b:atp_TexOptions|.

  * Plays nice with the Command-T plugin. The Command-T plugin provides
    mappings for <Leader>l and <Leader>u (defaults to \l and \u) which call
    commands "CommandT" and "CommandTBuffer". ATP also maps to <Leader> and
    <Leader>u. Command-T, however, is well behaved and does not overwrite the
    ATP mappings.

  * To make the Command-T mappings available while editing a tex file this
    configuration file creates alternate mappings <Leader>T and <Leader>U,
    usually \T and \U, for |:CommandT| and |:CommandTBuffer|, respectively.
    These mappings are defined only for the buffer.

  * Play nice with the UltiSnips plugin. Both UltiSnips and ATP provide
    mappings for <C-j> and <C-k>. The ATP mappings are local to the buffer
    while the UltiSnips mappings are global. Removing the local ATP mappings
    leaves the UltiSnips amppings intact.

  * Also deactivates the |<Right>| mapping as it interferes with the <C-j>
    mapping.

  * Optionally configures vim project (ATP considers every directory to be a
    "project") to use a subdirectory for compilation. The subdirectory is
    named "working". For each project the user chooses whether or not to use a
    working directory. If so, the working directory is created and in the
    project directory a symlink is created to the output pdf file in the
    working directory. The user's choice is recorded in a hidden file
    (".dna_atprc") at file creation time so the user is not asked when the
    file is subsequently opened. If the user later changes their mind about
    use of a working subdirectory they simply have to delete the ".dna_atprc"
    file and reopen the project file. The user will be asked again for their
    preference.

==============================================================================
COMMANDS                                                   *dn-latex-commands*

:[N]InsertSpecialChar                                     *:InsertSpecialChar*
  Insert a special character into text at current cursor location. Calls
  |dn#latex#insertSpecialChar()|.

:[N]AlignTable                                                   *:AlignTable*
  Align latex table on "&" characters. Calls |dn#latex#alignTable()|.

==============================================================================
FUNCTIONS                                                 *dn-latex-functions*

dn#latex#alignTable()                                  *dn#latex#alignTable()*
  Arrange columns in table source. Assumes table source has a structure like:
>
    \begin{tabular}{xxx}
    \toprule
    Header 1 & Header 2 & Header 3 \\
    \midrule
    Content 1 & Content 2 & Content 3 \\
    ...
    \bottomrule
    \end{tabular}
<
  The begin and end tabular environment commands are used to find the start
  and end of the table. The function uses column separators ("&") to locate
  columns. It ignores escaped ampersands but unescaped ampersands in comments
  will cause unpredictable behaviour. The function must be called from within
  the table.

dn#latex#insertSpecialChar([insert])            *dn#latex#insertSpecialChar()*
  Insert a special character in the text. The optional [insert] argument
  indicates whether the function was called from |Insert-mode|.
  [insert] is false if omitted.

  Requires a vim environment in which unicode characters can be displayed.
  There is no meaningful return value.

dn#latex#insertTemplate()                          *dn#latex#insertTemplate()*
  Insert template into text and ready it for use.

dn#latex#syncBeamer()                                  *dn#latex#syncBeamer()*
  Installs beamer files in local texmf tree. Requires executables "kpsewhich"
  and "rsync". Returns bool indicating success of operation.

==============================================================================
MAPPINGS                                                   *dn-latex-mappings*


[NI]<Leader>is
  * insert a special character at cursor location
  * calls |dn#latex#insertSpecialChar()|

[NI]<Leader>at
  * align current table on "&" character
  * calls |dn#latex#aligTable()|

[N]>E
  * move to next environment

[N]>E
  * move to previous environment

==============================================================================
VARIABLES                                                      *dn-latex-vars*

The dn-latex plugin contributes to the |dn-utils| plugin's help system (see
|dn#util#help()| for details). In the help system navigate to: vim -> tex.


vim:tw=78:ts=8:ft=help:norl:
